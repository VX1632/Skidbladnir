Kubernetes Cluster Setup with MicroK8s
Prerequisites
Secure Network Configuration (Before Init)

Ensure the following ports are open/configured for the Kubernetes components:
Port(s)	Purpose
2379-2380	etcd client and peer communication
10250	kubelet API
10255	Read-only kubelet port (optional, can disable)
10257-10259	Control plane (controller-manager, scheduler)
6443	Kubernetes API server (required)
179	BGP (if using Calico with BGP)
4789/UDP or 51820/UDP	Container networking (Calico VXLAN / WireGuard)
SSH Configuration (Safe Defaults)

Prepare the node for SSH access with enhanced security settings:

sudo apt update
sudo apt install openssh-server
sudo nano /etc/ssh/sshd_config

Recommended changes in sshd_config:

Port <your-port>                 # Security through obscurity (non-default port)
PermitRootLogin no               # Disable root login for safety
PasswordAuthentication yes       # Use only temporarily for key creation
PubkeyAuthentication no          # Enable after pubkeys are set up
AuthorizeUser <username>         # Restrict admin access to specific user
MaxSessions 2                    # Limit concurrent sessions
MaxAuthTries 3                   # Reduce brute-force window
LoginGraceTime 30m               # Time allowed for login before disconnect
PermitEmptyPasswords no          # Disallow empty passwords

MicroK8s Installation

MicroK8s was selected for its feature-rich yet lightweight Kubernetes distribution, ideal for Ubuntu-based systems.

sudo snap install microk8s --channel=1.31/stable --classic
sudo usermod -a -G microk8s $USER
sudo chown -f -R $USER ~/.kube
newgrp microk8s
microk8s status --wait-ready
